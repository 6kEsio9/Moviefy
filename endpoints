AUTHENTICATION TYPES:
type ReviewUser = {
  movieId: string;
  movieTitle: string;
  rating: number;
  comment: string;
  likes: string[];
};

type User = {
  token: string;
  id: string;
  username: string;
  pfp: string;
};

type UserProfile = {
  id: string;
  username: string;
  email: string;
  bio: string;
  pfp: string;
};

export type WatchList = {
  watched: Movie[];
  isWatching: Movie[];
  willWatch: Movie[];
};
AUTHENTICATION API:
----------------------------------------------------
Login: url/login POST
-> body: {formData: {username: string, password: string}}
<- User
----------------------------------------------------
Register: url/register POST
-> body: {formData: {username: string, email: string, password: string, confirm: string}}
<- User
----------------------------------------------------
Get user: url/users? GET
-> params: {userId: string}
<- UserProfile
----------------------------------------------------
Get user watchlist: url/users/watchlist GET
-> params: {userId: string}
<- WatchList
----------------------------------------------------
Change movie status: url/change PUT NEEDS AUTHORIZATION
-> body: {userId: string, movieId: string, status: number}
<- OK
----------------------------------------------------
Get user reviews: url/users/reviews? GET
-> params: {userId: string}
<- ReviewUser[]
----------------------------------------------------
Edit review: url/users/reviews/edit PUT NEEDS AUTHORIZATION
-> body: {userId: string, movieId: string, comment: string}
<- OK
----------------------------------------------------
Edit user: url/users/edit PUT
-> body: {userId: string, email: string, bio?: string, pfp?: string, newPassword?: string, newConfirm?: string}
<- OK
----------------------------------------------------
====================================================
MOVIE TYPES:
type ReviewMovie = {
  userId: string;
  rating: number;
  comment: string;
  likes: string[];
};

type Movie = {
  id: string;
  title: string;
  imageUrl: string;
  year: number;
  avgRating: number;
  genre: string;
  ageRating: number;
  summary: string;
  director: string;
  cast: string[];
  crew: string[];
  reviews: ReviewMovie[];
};
MOVIES API:
----------------------------------------------------
Get all movies: url/movies GET
-> 
<- Movie[]
----------------------------------------------------
Get movie by id: url/movies? GET
-> params: {movieId: string}
<- Movie
----------------------------------------------------
Search: url/search? GET
-> params: {input: string, users: string<"true"|"false">}
<- users: true => [Movie[], Users[]]
false => [Movie[]]
----------------------------------------------------
Rate movie: url/movies/rate POST NEEDS AUTHORIZATION
-> body: {userId: string, movieId: string, rating: number, comment?: string}
<- OK
----------------------------------------------------
Edit review: url/movies/reviews/edit PUT NEEDS AUTHORIZATION
-> body: {userId: string, movieId: string, comment: string}
<- OK
----------------------------------------------------
Delete review: url/movies/reviews/delete DELETE NEEDS AUTHORIZATION
-> body: {userId: string, movieId: string}
<- OK
----------------------------------------------------
Like review: url/movies/like POST NEEDS AUTHORIZATION
//if like is true -> like. if like is false -> dislike.
-> body: {userId: string, movieId: string, like: boolean}
<- OK
----------------------------------------------------
